/*
 * This Java source file was generated by the Gradle 'init' task.
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package minijar;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.zip.ZipEntry;

import com.ibm.wala.classLoader.IClass;
import com.ibm.wala.classLoader.IMethod;
import com.ibm.wala.core.java11.Java9AnalysisScopeReader;
import com.ibm.wala.core.util.warnings.Warnings;
import com.ibm.wala.ipa.callgraph.AnalysisCache;
import com.ibm.wala.ipa.callgraph.AnalysisCacheImpl;
import com.ibm.wala.ipa.callgraph.AnalysisOptions;
import com.ibm.wala.ipa.callgraph.AnalysisScope;
import com.ibm.wala.ipa.callgraph.CGNode;
import com.ibm.wala.ipa.callgraph.CallGraph;
import com.ibm.wala.ipa.callgraph.CallGraphBuilder;
import com.ibm.wala.ipa.callgraph.CallGraphBuilderCancelException;
import com.ibm.wala.ipa.callgraph.Entrypoint;
import com.ibm.wala.ipa.callgraph.impl.Util;
import com.ibm.wala.ipa.cha.ClassHierarchyException;
import com.ibm.wala.ipa.cha.ClassHierarchyFactory;
import com.ibm.wala.ipa.cha.IClassHierarchy;
import com.ibm.wala.shrike.shrikeBT.shrikeCT.ClassInstrumenter;
import com.ibm.wala.shrike.shrikeBT.shrikeCT.OfflineInstrumenter;
import com.ibm.wala.shrike.shrikeCT.ClassReader;
import com.ibm.wala.shrike.shrikeCT.ClassWriter;
import com.ibm.wala.shrike.shrikeCT.ConstantPoolParser;
import com.ibm.wala.util.collections.HashMapFactory;
import com.ibm.wala.util.config.FileOfClasses;

public class MiniJar {
  private static final String USAGE =
      "MiniJar usage:\n"
          + "This tool takes the following command line options:\n"
          + "    <jarname> <jarname> ...   Process the classes from these jars\n"
          + "    -o <jarname>              Put the resulting classes into <jarname>\n";

  private static OfflineInstrumenter instrumenter;


  static class UnknownAttributeException extends Exception {
    private static final long serialVersionUID = 8845177787110364793L;

    UnknownAttributeException(String t) {
      super("Attribute '" + t + "' not understood");
    }
  }

  public static void main(String[] args) throws Exception {
    if (args == null || args.length == 0) {
      System.err.println(USAGE);
      System.exit(1);
    }

    String jarFile = "";
    String mainClass = "";
    String scopeFileData = "";
    for (int i = 0; i < args.length - 1; i++) {
      if (args[i] == null) {
        throw new IllegalArgumentException("args[" + i + "] is null");
      }
      if (!args[i].startsWith("-") && args[i].endsWith("jar")) {
          jarFile = args[i];  // Assuming a single jar is passed in
      }
      if (args[i].startsWith("-m")) {
    	  mainClass = args[i+1];
      }
      if (args[i].startsWith("-d")) {
    	  scopeFileData = args[i+1];
      }
    }
    
    if (jarFile == "") {
    	throw new IllegalArgumentException("No Jar file specified");
    }
    
    
    final ArrayList<ZipEntry> entries = new ArrayList<>();

    instrumenter = new OfflineInstrumenter();
    instrumenter.setManifestBuilder(entries::add);
    instrumenter.parseStandardArgs(args);
    instrumenter.beginTraversal();
    ClassInstrumenter ci;
    MiniJar cw = new MiniJar();
    Set<String> cg = cw.getReachableMethods(jarFile, mainClass, scopeFileData);
   
    while ((ci = instrumenter.nextClass()) != null) {
      try {
        cw.processClass(ci, cg);
      } catch (UnknownAttributeException ex) {
        System.err.println(ex.getMessage() + " in " + instrumenter.getLastClassResourceName());
      }
    }

    instrumenter.writeUnmodifiedClasses();
    instrumenter.close();
  }

  private void processClass(final ClassInstrumenter ci, Set<String> cg) throws Exception {
    ClassReader cr = ci.getReader();
    
    ClassWriter cw =
            new ClassWriter() {
              private final Map<Object, Integer> entries = HashMapFactory.make();

              {
                ConstantPoolParser p = cr.getCP();
                for (int i = 1; i < p.getItemCount(); i++) {
                  final byte itemType = p.getItemType(i);
                  switch (itemType) {
                    case CONSTANT_Integer:
                      entries.put(p.getCPInt(i), i);
                      break;
                    case CONSTANT_Long:
                      entries.put(p.getCPLong(i), i);
                      break;
                    case CONSTANT_Float:
                      entries.put(p.getCPFloat(i), i);
                      break;
                    case CONSTANT_Double:
                      entries.put(p.getCPDouble(i), i);
                      break;
                    case CONSTANT_Utf8:
                      entries.put(p.getCPUtf8(i), i);
                      break;
                    case CONSTANT_String:
                      entries.put(new CWStringItem(p.getCPString(i), CONSTANT_String), i);
                      break;
                    case CONSTANT_Class:
                      entries.put(new CWStringItem(p.getCPClass(i), CONSTANT_Class), i);
                      break;
                    default:
                      // do nothing
                  }
                }
              }

              private int findExistingEntry(Object o) {
                return entries.getOrDefault(o, -1);
              }

              @Override
              protected int addCPEntry(Object o, int size) {
                int entry = findExistingEntry(o);
                if (entry != -1) {
                  return entry;
                } else {
                  return super.addCPEntry(o, size);
                }
              }
            };
    
    String className = cr.getName();

    ClassReader.AttrIterator iter = new ClassReader.AttrIterator();

    int methodCount = cr.getMethodCount();
    
    for (int i = 0; i < methodCount; i++) {
      cr.initMethodAttributeIterator(i, iter);
      String methodName = cr.getMethodName(i);
      String methodType = cr.getMethodType(i);

      if (!isReachable(cg, className, methodName, methodType)) {
    	  ci.deleteMethod(i);
      }
    }

    ci.emitClass(cw);
    instrumenter.outputModifiedClass(ci, cw);
  }

  private boolean isReachable(Set<String> cg, String className, String methodName, String methodType) {
	  String desc = getMethodString(className, methodName, methodType);
	  boolean reachable = cg.contains(desc);
	  if (reachable) {
		  System.out.println("Reachable: " + desc);
	  } else {
		  System.out.println("Not reachable: " + desc);
	  }
	  return reachable;
  }
  
  private Set<String> getReachableMethods(String scopeFile, String mainClass, String scopeFileData) throws IOException, ClassHierarchyException, IllegalArgumentException, CallGraphBuilderCancelException {
	
	//AnalysisScope scope = AnalysisScopeReader.readJavaScope(scopeFileData, null, MiniJar.class.getClassLoader());
	//AnalysisScope scope = new Java9AnalysisScopeReader().makeJavaBinaryAnalysisScope(scopeFile, null);
	AnalysisScope scope =
				new Java9AnalysisScopeReader().readJavaScope(scopeFileData, null, MiniJar.class.getClassLoader());
	
	
	// set exclusions.  we use these exclusions as standard for handling JDK 8
	//addDefaultExclusions(scope);
	IClassHierarchy cha = ClassHierarchyFactory.make(scope);
	System.out.println(cha.getNumberOfClasses() + " classes");
	System.out.println(Warnings.asString());
	Warnings.clear();
	AnalysisOptions options = new AnalysisOptions();
	Iterable<Entrypoint> entrypoints =  Util.makeMainEntrypoints(scope, cha, mainClass);
	Set<Entrypoint> entrypointsSet = new HashSet<Entrypoint>();
	entrypoints.forEach(e -> entrypointsSet.add(e));
	System.out.println("entrypoints:" + entrypointsSet.size());
	options.setEntrypoints(entrypoints);
	// you can dial down reflection handling if you like
	options.setReflectionOptions(AnalysisOptions.ReflectionOptions.NO_FLOW_TO_CASTS);
	AnalysisCache cache = new AnalysisCacheImpl();
	
  CallGraphBuilder builder = Util. makeRTABuilder(options, cache, cha, scope);
  //CallGraphBuilder builder = Util.makeZeroCFABuilder(Language.JAVA, options, cache, cha, scope);
  //CallGraphBuilder builder = Util.makeNCFABuilder(2, options, cache, cha, scope);
  //CallGraphBuilder builder = Util.makeVanillaNCFABuilder(2, options, cache, cha, scope);
  //CallGraphBuilder builder = Util.makeZeroOneContainerCFABuilder(options, cache, cha, scope);
	
	System.out.println("building call graph...");
	CallGraph cg = builder.makeCallGraph(options, null);
	System.out.println("done! " + cg.getNumberOfNodes());
	
	Set<String> allMethods = new HashSet<String>();
	cg.forEach(n -> processMethod(allMethods, n, cha));
  System.out.println("number of methods: " + allMethods.size());
	
	return allMethods;
  }

  private static void processMethod(Set<String> allMethods, CGNode n, IClassHierarchy cha) {
    IMethod m = n.getMethod();
    allMethods.add(getMethodDescriptor(m));
    allMethods.addAll(getSuperMethods(m,cha));
  }

  private static Set<String> getSuperMethods(IMethod m, IClassHierarchy cha) {
    Set<String> ret = new HashSet<String>();
    Set<IClass> superClasses = new HashSet<IClass>();
    IClass superClass = m.getDeclaringClass().getSuperclass();
    
    while(superClass != null) {
      superClasses.add(superClass);
      superClass = superClass.getSuperclass();
    }

    for(IClass klass: superClasses) {
      String superMethod = getSuperMethod(klass, getMethodName(m));
      if (superMethod != null) {
        ret.add(superMethod);
      }
    }

    return ret;
  }

  private static String getSuperMethod(IClass klass, String methodName) {
    for (IMethod m: klass.getAllMethods()) {
      String superMethodName = getMethodName(m);
      if (superMethodName.equals(methodName)) {
        return getMethodDescriptor(m);
      }
    }
    return null;
  }

  private static String getMethodString (String className, String methodName, String methodType) {
	  String ret = className + "#" + methodName + methodType;
	  if (className.startsWith("L")) {
		  return ret;
	  }
	  return "L" + ret;
  }

  private static String getMethodName(IMethod m) {
    return m.getName().toString() +  m.getDescriptor().toString();
  }

  private static String getMethodDescriptor(IMethod m) {
	  return getMethodString(m.getDeclaringClass().getName().toString(), m.getName().toString(), m.getDescriptor().toString());
  }
  

  private static final String EXCLUSIONS = "java\\/awt\\/.*\n" + 
	  		"javax\\/swing\\/.*\n" + 
	  		"sun\\/awt\\/.*\n" + 
	  		"sun\\/swing\\/.*\n" + 
	  		"com\\/sun\\/.*\n" + 
	  		"sun\\/.*\n" + 
	  		"org\\/netbeans\\/.*\n" + 
	  		"org\\/openide\\/.*\n" + 
	  		"com\\/ibm\\/crypto\\/.*\n" + 
	  		"com\\/ibm\\/security\\/.*\n" + 
	  		"org\\/apache\\/xerces\\/.*\n" + 
	  		"java\\/security\\/.*\n" + 
	  		"jdk\\/.*\n" +
	  		"";

	  public static void addDefaultExclusions(AnalysisScope scope) throws UnsupportedEncodingException, IOException {
		    scope.setExclusions(new FileOfClasses(new ByteArrayInputStream(EXCLUSIONS.getBytes("UTF-8"))));
	  }

}